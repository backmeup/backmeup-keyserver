package org.backmeup.keysrv.dal.postgres.impl;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.naming.InitialContext;
import javax.sql.DataSource;

import org.backmeup.keysrv.worker.FileLogger;

public class Connection {
	private static DataSource datasource = null;

	private static void init() {
		if (datasource == null) {
			try {
				InitialContext ctx = new InitialContext();
				datasource = (DataSource) ctx
						.lookup("java:comp/env/jdbc/keysrvdb");
			} catch (Exception e) {
				FileLogger.logException(e);
				e.printStackTrace();
			}
		}
	}

	public static java.sql.Connection getInstance() throws SQLException {
		init();
		java.sql.Connection con = datasource.getConnection();
		con.setAutoCommit(true);
		return con;
	}

	public static PreparedStatement getPreparedStatement(String sql)
			throws SQLException {
		return getPreparedStatement(sql, PreparedStatement.NO_GENERATED_KEYS);
	}

	public static PreparedStatement getPreparedStatement(String sql,
			int autoGeneratedKeys) throws SQLException {
		java.sql.Connection con = Connection.getInstance();
		return con.prepareStatement(sql, autoGeneratedKeys);
	}

	public static void closeQuiet(PreparedStatement ps) {
		java.sql.Connection con = null;

		try {
			if (ps != null) {
				if (ps.isClosed() == false) {
					con = ps.getConnection();
					ps.close();
				}
			}
		} catch (Exception e) {
			// ignore
			FileLogger.logException(e);
		}

		Connection.closeQuiet(con);
	}

	public static void closeQuiet(java.sql.Connection con) {
		try {
			if ((con != null) && (con.isClosed() == false)) {
				con.close();
			}
		} catch (Exception e) {
			// ignore
			FileLogger.logException(e);
		}
	}

	public static void closeQuiet(ResultSet rs) {
		try {
			if ((rs != null) && (rs.isClosed() == false)) {
				rs.close();
			}
		} catch (Exception e) {
			// ignore
			FileLogger.logException(e);
		}
	}
}
